import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class PossibleSolution {
    public static void main(String[] args) throws InterruptedException {
        String path = "C:\\Users\\adanil\\Desktop\\test";

        ExecutorService executor = Executors.newFixedThreadPool(2);
        Index index = new Index(executor);

        try {
            index.indexAllTxtInPath(path);
        } catch (IOException e) {
            System.out.println("ERROR: " + e.getMessage());
            e.printStackTrace();
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);

        System.out.println(index.getInvertedIndex());
    }


    public static class Index {
        private final ExecutorService pool;
        private final Map<String, List<Pointer>> invertedIndex;

        public Index(ExecutorService pool) {
            this.pool = pool;
            this.invertedIndex = new ConcurrentHashMap<>();
        }

        public Map<String, List<Pointer>> getInvertedIndex() {
            Map<String, List<Pointer>> map = new HashMap<>();
            for (Map.Entry<String, List<Pointer>> e : invertedIndex.entrySet()) {
                // do full copy
                ArrayList<Pointer> points = new ArrayList<>();
                for (Pointer p : e.getValue()) {
                    points.add(new Pointer(p));
                }
                map.put(e.getKey(), new ArrayList<>(e.getValue()));
            }
            return map;
        }

        public List<Pointer> getRelevantDocuments(String term) {
            ArrayList<Pointer> points = new ArrayList<>();
            for (Pointer p : invertedIndex.getOrDefault(term, Collections.emptyList())) {
                points.add(new Pointer(p));
            }
            return points;
        }

        public Optional<Pointer> getMostRelevantDocument(String term) {
            return invertedIndex.getOrDefault(term, Collections.emptyList()).stream().max(Comparator.comparing(o -> o.count));
        }


        public void indexAllTxtInPath(String pathToDir) throws IOException {
            Path of = Path.of(pathToDir);
            BlockingQueue<Path> queue = new ArrayBlockingQueue<>(2);

            try (Stream<Path> stream = Files.list(of)) {
                List<Path> paths = stream.collect(Collectors.toList());

                for (Path path : paths) {
                    while (true) {
                        if (queue.offer(path)) {
                            pool.submit(new IndexTask(queue));
                            break;
                        }
                    }
                }
            }
        }


        static class Pointer {
            private Integer count;
            private final String filePath;

            public Pointer(Integer count, String filePath) {
                this.count = count;
                this.filePath = filePath;
            }

            public Pointer(Pointer pointer) {
                this.count = pointer.count;
                this.filePath = pointer.filePath;
            }


            @Override
            public String toString() {
                return "{" + "count=" + count + ", fileName='" + filePath + '\'' + '}';
            }
        }


        class IndexTask implements Runnable {

            private final BlockingQueue<Path> queue;

            public IndexTask(BlockingQueue<Path> queue) {
                this.queue = queue;
            }

            @Override
            public void run() {
                try {
                    Path take = queue.take();
                    List<String> strings = Files.readAllLines(take);
                    System.out.println("Index: " + take.getFileName());

                    strings.stream()
                            .flatMap(str -> Stream.of(str.split(" ")))
                            .forEach(w -> invertedIndex.compute(w, (word, list) -> {
                                if (list == null) {
                                    ArrayList<Pointer> arrayList = new ArrayList<>();
                                    arrayList.add(new Pointer(1, take.toString()));
                                    return arrayList;
                                } else {
                                    Optional<Pointer> ourPointer = list.stream()
                                            .filter(pointer -> pointer.filePath.equals(take.toString()))
                                            .findFirst();

                                    if (ourPointer.isPresent()) ourPointer.get().count += 1;
                                    else list.add(new Pointer(1, take.toString()));

                                    return list;
                                }
                            }));
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } catch (IOException e) {
                    // read file error
                    e.printStackTrace();
                }
            }

        }
    }
}
